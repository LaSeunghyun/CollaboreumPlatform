openapi: 3.0.3
info:
  title: Collaboreum MVP Platform API
  description: 음악 협업 플랫폼 API 문서
  version: 1.0.0
  contact:
    name: Collaboreum Team
    email: support@collaboreum.com
servers:
  - url: http://localhost:5000/api
    description: Development server
  - url: https://api.collaboreum.com/api
    description: Production server

security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: 사용자 회원가입
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                name:
                  type: string
                role:
                  type: string
                  enum: [user, artist, admin]
                  default: user
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: 사용자 로그인
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /community/posts:
    get:
      tags:
        - Community
      summary: 커뮤니티 게시글 목록 조회
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 게시글 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/CommunityPost'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Community
      summary: 커뮤니티 게시글 작성
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
                - category
              properties:
                title:
                  type: string
                content:
                  type: string
                category:
                  type: string
                images:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: 게시글 작성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  post:
                    $ref: '#/components/schemas/CommunityPost'

  /community/posts/{id}:
    get:
      tags:
        - Community
      summary: 커뮤니티 게시글 상세 조회
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 게시글 상세 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  post:
                    $ref: '#/components/schemas/CommunityPost'

  /projects:
    get:
      tags:
        - Projects
      summary: 프로젝트 목록 조회
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [active, completed, cancelled]
      responses:
        '200':
          description: 프로젝트 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Projects
      summary: 프로젝트 생성
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
      responses:
        '201':
          description: 프로젝트 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  project:
                    $ref: '#/components/schemas/Project'

  /projects/{id}:
    get:
      tags:
        - Projects
      summary: 프로젝트 상세 조회
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 프로젝트 상세 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  project:
                    $ref: '#/components/schemas/Project'

  /payments:
    post:
      tags:
        - Payments
      summary: 결제 요청 생성
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - projectId
                - amount
                - paymentMethod
              properties:
                projectId:
                  type: string
                amount:
                  type: number
                paymentMethod:
                  type: string
                backerInfo:
                  type: object
                rewardId:
                  type: string
                message:
                  type: string
      responses:
        '201':
          description: 결제 요청 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  payment:
                    $ref: '#/components/schemas/Payment'

  /search:
    get:
      tags:
        - Search
      summary: 통합 검색
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
            enum: [all, artists, projects, events, posts]
            default: all
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: 검색 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  results:
                    type: object
                    properties:
                      artists:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      projects:
                        type: array
                        items:
                          $ref: '#/components/schemas/Project'
                      events:
                        type: array
                        items:
                          $ref: '#/components/schemas/Event'
                      posts:
                        type: array
                        items:
                          $ref: '#/components/schemas/CommunityPost'
                      total:
                        type: integer

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, artist, admin]
        profileImage:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CommunityPost:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        category:
          type: string
        author:
          $ref: '#/components/schemas/User'
        images:
          type: array
          items:
            type: string
        likes:
          type: integer
        comments:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        creator:
          $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [active, completed, cancelled]
        targetAmount:
          type: number
        currentAmount:
          type: number
        backersCount:
          type: integer
        deadline:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProjectCreateRequest:
      type: object
      required:
        - title
        - description
        - targetAmount
        - deadline
      properties:
        title:
          type: string
        description:
          type: string
        targetAmount:
          type: number
        deadline:
          type: string
          format: date-time
        images:
          type: array
          items:
            type: string

    Payment:
      type: object
      properties:
        id:
          type: string
        projectId:
          type: string
        amount:
          type: number
        paymentMethod:
          type: string
        status:
          type: string
          enum: [pending, completed, failed, cancelled]
        backerInfo:
          type: object
        createdAt:
          type: string
          format: date-time

    Event:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        date:
          type: string
          format: date-time
        location:
          type: string
        organizer:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
        error:
          type: string

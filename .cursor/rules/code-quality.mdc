---
description: 코드 품질 및 자동화 규칙
globs: ["src/**/*.tsx", "src/**/*.ts", "*.json", "*.md"]
alwaysApply: true
---

# 코드 품질 및 자동화 규칙

## 📝 코드 스타일 규칙

### TypeScript 엄격성
- `strict: true` 활성화
- `noImplicitAny: true` 활성화
- `strictNullChecks: true` 활성화
- `any` 타입 사용 금지

```tsx
// ❌ 금지
const data: any = response.data
function handleClick(event: any) {}

// ✅ 권장
const data: ProjectResponse = response.data
function handleClick(event: React.MouseEvent<HTMLButtonElement>) {}
```

### ESLint 규칙
- `no-restricted-imports`로 `src/components/*` 직접 import 금지
- `@typescript-eslint/no-unused-vars` 활성화
- `@typescript-eslint/no-explicit-any` 경고

### Prettier 설정
- `prettier-plugin-tailwindcss` 사용
- 클래스명 자동 정렬
- 일관된 코드 포맷팅

## 🔍 자동화 규칙

### Pre-commit 훅
- 코드 포맷팅 자동 적용
- ESLint 자동 수정
- 타입 체크 실행

### Pre-push 훅
- 전체 품질 검사 실행
- `npm run check:all` 통과 필수
- 실패 시 push 차단

### CI/CD 파이프라인
- PR에서 `npm run check:all` 필수 통과
- 자동 배포 전 품질 검증
- 실패 시 배포 차단

## 🧹 코드 정리 규칙

### Dead Code 제거
- 미사용 컴포넌트/함수/변수 제거
- `ts-prune`으로 미사용 코드 탐지
- `knip`으로 미사용 의존성 제거

### Import 정리
- 사용하지 않는 import 제거
- 상대 경로 대신 절대 경로 사용
- `@/` 별칭 활용

### 파일 구조
- 기능별 폴더 구조 유지
- 컴포넌트는 단일 책임 원칙
- 유틸리티 함수는 `src/utils/`에 배치

## 📊 품질 지표

### 필수 통과 기준
- TypeScript 컴파일 에러 0건
- ESLint 위반 0건
- Prettier 포맷팅 위반 0건
- 테스트 실패 0건

### 권장 기준
- 코드 커버리지 80% 이상
- 접근성 위반 0건 (axe-core)
- 성능 점수 90점 이상 (Lighthouse)

## 🔧 도구 설정

### VS Code 설정
- ESLint, Prettier 확장 설치
- 자동 포맷팅 활성화
- 타입 체크 실시간 표시

### Git 설정
- 커밋 메시지 한글 작성
- 컨벤셔널 커밋 형식 사용
- PR 템플릿 활용

## 📚 문서화 규칙

### 코드 주석
- 복잡한 로직에 한글 주석
- JSDoc으로 함수 설명
- TODO 주석 최소화

### README 업데이트
- 새로운 기능 추가 시 문서 업데이트
- 설치/실행 방법 명시
- 환경 변수 설정 가이드

### 커밋 메시지
- 한글로 작성
- 변경 사항 명확히 설명
- 관련 이슈 번호 포함
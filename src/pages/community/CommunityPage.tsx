import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '../../components/ui/button';
import { Input } from '../../components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../../components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from '../../components/ui/dialog';
import { Textarea } from '../../components/ui/textarea';
import { Search, Plus, MessageCircle, Users, MessageSquare, Heart } from 'lucide-react';
import { useCommunityPosts, useCreateCommunityPost } from '../../features/community/hooks/useCommunityPosts';
import { LoadingState, ErrorState, EmptyCommunityState } from '../../components/organisms/States';
import { useAuth } from '../../contexts/AuthContext';
import { useCommunityStats } from '../../lib/api/useStats';
import { useCategories } from '../../lib/api/useCategories';
import { Badge } from '../../components/ui/badge';

// Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Í≤åÏãúÍ∏Ä Ïª¥Ìè¨ÎÑåÌä∏
const CategoryPosts: React.FC<{
    categoryId: string;
    searchQuery: string;
    sortBy: "latest" | "popular" | "comments" | "views";
}> = ({ categoryId, searchQuery, sortBy }) => {
    const { data: categoryPosts, isLoading, error } = useCommunityPosts({
        category: categoryId,
        search: searchQuery || undefined,
        sortBy: sortBy === "latest" ? "createdAt" : "likes",
        order: sortBy === 'latest' ? 'desc' : 'desc',
    });

    if (isLoading) {
        return <LoadingState title="Í≤åÏãúÍ∏ÄÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë..." />;
    }

    if (error) {
        return (
            <ErrorState
                title="Í≤åÏãúÍ∏ÄÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§"
                description="Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî."
            />
        );
    }

    if (!categoryPosts?.posts || categoryPosts.posts.length === 0) {
        return (
            <EmptyCommunityState
                action={undefined}
            />
        );
    }

    return (
        <div className="bg-white rounded-lg shadow-sm">
            {/* ÌÖåÏù¥Î∏î Ìó§Îçî */}
            <div className="hidden md:grid md:grid-cols-12 gap-4 p-4 bg-gray-50 border-b text-sm font-medium text-gray-600">
                <div className="col-span-1 text-center">Î≤àÌò∏</div>
                <div className="col-span-5">Ï†úÎ™©</div>
                <div className="col-span-2 text-center">ÏûëÏÑ±Ïûê</div>
                <div className="col-span-1 text-center">Ï°∞Ìöå</div>
                <div className="col-span-1 text-center">Ï¢ãÏïÑÏöî</div>
                <div className="col-span-1 text-center">Ïã´Ïñ¥Ïöî</div>
                <div className="col-span-1 text-center">ÏûëÏÑ±Ïùº</div>
            </div>

            {/* Í≤åÏãúÍ∏Ä Î™©Î°ù */}
            {categoryPosts.posts.map((post: any, index: number) => {
                const postId = post.id || post._id;
                if (!postId) return null;

                return (
                    <div
                        key={postId}
                        className="hidden md:grid md:grid-cols-12 gap-4 p-4 border-b hover:bg-gray-50 transition-colors cursor-pointer"
                        onClick={() => {
                            console.log('Post clicked with ID:', postId);
                            if (!postId || postId === 'undefined' || postId === 'null') {
                                console.error('Invalid postId:', postId);
                                return;
                            }
                            window.location.href = `/community/post/${postId}`;
                        }}
                    >
                        {/* Î≤àÌò∏ */}
                        <div className="col-span-1 text-center text-sm text-gray-500">
                            {categoryPosts.posts.length - index}
                        </div>

                        {/* Ï†úÎ™© */}
                        <div className="col-span-5">
                            <div className="flex items-center gap-2 mb-1">
                                <Badge variant="secondary" className="text-xs">
                                    {post.category}
                                </Badge>
                                {post.isHot && (
                                    <Badge variant="destructive" className="text-xs">
                                        HOT
                                    </Badge>
                                )}
                            </div>
                            <h3 className="text-sm font-medium line-clamp-1 hover:text-blue-600">
                                {post.title}
                                {(post.comments || post.replies) > 0 && (
                                    <span className="text-blue-600 ml-1">[{post.comments || post.replies}]</span>
                                )}
                            </h3>
                        </div>

                        {/* ÏûëÏÑ±Ïûê */}
                        <div className="col-span-2 text-center text-sm text-gray-600">
                            {typeof post.author === 'string' ? post.author : post.author?.name || 'Unknown'}
                        </div>

                        {/* Ï°∞ÌöåÏàò */}
                        <div className="col-span-1 text-center text-sm text-gray-500">
                            {(post.views || post.viewCount || 0).toLocaleString()}
                        </div>

                        {/* Ï¢ãÏïÑÏöî */}
                        <div className="col-span-1 text-center text-sm text-gray-500">
                            <div className="flex items-center justify-center gap-1">
                                <span className="text-red-500">‚ù§Ô∏è</span>
                                <span>{post.likes || 0}</span>
                            </div>
                        </div>

                        {/* Ïã´Ïñ¥Ïöî */}
                        <div className="col-span-1 text-center text-sm text-gray-500">
                            <div className="flex items-center justify-center gap-1">
                                <span className="text-blue-500">üëé</span>
                                <span>{post.dislikes || 0}</span>
                            </div>
                        </div>

                        {/* ÏûëÏÑ±Ïùº */}
                        <div className="col-span-1 text-center text-sm text-gray-500">
                            {new Date(post.createdAt).toLocaleDateString('ko-KR', {
                                month: 'long',
                                day: 'numeric'
                            })}
                        </div>
                    </div>
                );
            })}

            {/* Î™®Î∞îÏùº Î†àÏù¥ÏïÑÏõÉ */}
            {categoryPosts.posts.length > 0 && (
                <div className="md:hidden space-y-2 p-4">
                    {categoryPosts.posts.map((post: any, index: number) => {
                        const postId = post.id || post._id;
                        if (!postId) return null;

                        return (
                            <div
                                key={postId}
                                className="p-4 border rounded-lg hover:bg-gray-50 transition-colors cursor-pointer"
                                onClick={() => {
                                    console.log('Post clicked with ID:', postId);
                                    if (!postId || postId === 'undefined' || postId === 'null') {
                                        console.error('Invalid postId:', postId);
                                        return;
                                    }
                                    window.location.href = `/community/post/${postId}`;
                                }}
                            >
                                <div className="flex items-center gap-2 mb-2">
                                    <Badge variant="secondary" className="text-xs">
                                        {post.category}
                                    </Badge>
                                    {post.isHot && (
                                        <Badge variant="destructive" className="text-xs">
                                            HOT
                                        </Badge>
                                    )}
                                </div>
                                <h3 className="font-medium text-sm mb-2 line-clamp-2">
                                    {post.title}
                                </h3>
                                <div className="flex items-center justify-between text-xs text-gray-500">
                                    <span>{typeof post.author === 'string' ? post.author : post.author?.name || 'Unknown'}</span>
                                    <div className="flex items-center gap-3">
                                        <span>Ï°∞Ìöå {post.views || post.viewCount || 0}</span>
                                        <span>‚ù§Ô∏è {post.likes || 0}</span>
                                        <span>üëé {post.dislikes || 0}</span>
                                    </div>
                                </div>
                            </div>
                        );
                    })}
                </div>
            )}
        </div>
    );
};

export const CommunityPage: React.FC = () => {
    const { user } = useAuth();
    const navigate = useNavigate();
    const [activeTab, setActiveTab] = useState("all");
    const [searchQuery, setSearchQuery] = useState("");
    const [sortBy, setSortBy] = useState<"latest" | "popular" | "comments" | "views">("latest");
    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
    const [createFormData, setCreateFormData] = useState({
        title: '',
        content: '',
        category: '',
        tags: ''
    });

    // API ÌõÖÎì§
    const { data: allPosts, isLoading: allLoading, error: allError } = useCommunityPosts({
        search: searchQuery || undefined,
        sortBy: sortBy === "latest" ? "createdAt" : "likes",
        order: sortBy === 'latest' ? 'desc' : 'desc',
    });


    const createPostMutation = useCreateCommunityPost();

    // Ïª§ÎÆ§ÎãàÌã∞ ÌÜµÍ≥Ñ Ï°∞Ìöå (ÏûÑÏãú ÎπÑÌôúÏÑ±Ìôî - API 404 Ïò§Î•ò Ìï¥Í≤∞ Ï†ÑÍπåÏßÄ)
    // const { data: communityStats, isLoading: statsLoading } = useCommunityStats();
    const communityStats = null;
    const statsLoading = false;

    // Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù Ï°∞Ìöå
    const { data: categories, isLoading: categoriesLoading } = useCategories();

    const handleCreatePost = () => {
        setIsCreateModalOpen(true);
    };

    const handlePostClick = (postId: string) => {
        console.log('Post clicked with ID:', postId);
        if (!postId || postId === 'undefined' || postId === 'null') {
            console.error('Invalid postId:', postId);
            return;
        }
        navigate(`/community/post/${postId}`);
    };


    const handleCreatePostSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!createFormData.title.trim() || !createFormData.content.trim() || !createFormData.category) {
            alert('Ï†úÎ™©, ÎÇ¥Ïö©, Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        try {
            const postData = {
                title: createFormData.title,
                content: createFormData.content,
                category: createFormData.category,
                tags: createFormData.tags ? createFormData.tags.split(',').map(tag => tag.trim()).filter(tag => tag) : [],
                status: 'published' as const
            };

            await createPostMutation.mutateAsync(postData);

            alert('Í≤åÏãúÍ∏ÄÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏûëÏÑ±ÎêòÏóàÏäµÎãàÎã§.');
            setCreateFormData({
                title: '',
                content: '',
                category: '',
                tags: ''
            });
            setIsCreateModalOpen(false);
        } catch (error: any) {
            console.error('Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ïã§Ìå®:', error);
            alert(`Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ïã§Ìå®: ${error?.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'}`);
        }
    };


    const renderPosts = (posts: any[], loading: boolean, error: any, category: string) => {
        if (loading) {
            return <LoadingState title="Í≤åÏãúÍ∏ÄÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë..." />;
        }

        if (error) {
            return (
                <ErrorState
                    title="Í≤åÏãúÍ∏ÄÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§"
                    description="Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî."
                />
            );
        }

        if (!posts || posts.length === 0) {
            return (
                <EmptyCommunityState
                    action={user ? {
                        label: "Í∏ÄÏì∞Í∏∞",
                        onClick: handleCreatePost
                    } : undefined}
                />
            );
        }

        return (
            <div className="bg-white rounded-lg shadow-sm">
                {/* ÌÖåÏù¥Î∏î Ìó§Îçî */}
                <div className="hidden md:grid md:grid-cols-12 gap-4 p-4 bg-gray-50 border-b text-sm font-medium text-gray-600">
                    <div className="col-span-1 text-center">Î≤àÌò∏</div>
                    <div className="col-span-5">Ï†úÎ™©</div>
                    <div className="col-span-2 text-center">ÏûëÏÑ±Ïûê</div>
                    <div className="col-span-1 text-center">Ï°∞Ìöå</div>
                    <div className="col-span-1 text-center">Ï¢ãÏïÑÏöî</div>
                    <div className="col-span-1 text-center">Ïã´Ïñ¥Ïöî</div>
                    <div className="col-span-1 text-center">ÏûëÏÑ±Ïùº</div>
                </div>

                {/* Í≤åÏãúÍ∏Ä Î™©Î°ù */}
                {posts.map((post: any, index: number) => {
                    // postId Í≤ÄÏ¶ù Î∞è Î°úÍπÖ
                    const postId = post.id || post._id;
                    console.log('Rendering post:', { postId, title: post.title, fullPost: post });

                    if (!postId) {
                        console.error('Post missing ID:', post);
                        return null;
                    }

                    return (
                        <div
                            key={postId}
                            className="hidden md:grid md:grid-cols-12 gap-4 p-4 border-b hover:bg-gray-50 transition-colors cursor-pointer"
                            onClick={() => handlePostClick(postId)}
                        >
                            {/* Î≤àÌò∏ */}
                            <div className="col-span-1 text-center text-sm text-gray-500">
                                {posts.length - index}
                            </div>

                            {/* Ï†úÎ™© */}
                            <div className="col-span-5">
                                <div className="flex items-center gap-2 mb-1">
                                    <Badge variant="secondary" className="text-xs">
                                        {categories?.find(cat => cat.id === post.category)?.label || post.category}
                                    </Badge>
                                    {post.isHot && (
                                        <Badge variant="destructive" className="text-xs">
                                            HOT
                                        </Badge>
                                    )}
                                </div>
                                <h3 className="text-sm font-medium line-clamp-1 hover:text-blue-600">
                                    {post.title}
                                    {(post.comments || post.replies) > 0 && (
                                        <span className="text-blue-600 ml-1">[{post.comments || post.replies}]</span>
                                    )}
                                </h3>
                            </div>

                            {/* ÏûëÏÑ±Ïûê */}
                            <div className="col-span-2 text-center text-sm text-gray-600">
                                {typeof post.author === 'string' ? post.author : post.author?.name || 'Unknown'}
                            </div>

                            {/* Ï°∞ÌöåÏàò */}
                            <div className="col-span-1 text-center text-sm text-gray-500">
                                {(post.views || post.viewCount || 0).toLocaleString()}
                            </div>

                            {/* Ï¢ãÏïÑÏöî */}
                            <div className="col-span-1 text-center text-sm text-gray-500">
                                <div className="flex items-center justify-center gap-1">
                                    <span className="text-red-500">‚ù§Ô∏è</span>
                                    <span>{post.likes || 0}</span>
                                </div>
                            </div>

                            {/* Ïã´Ïñ¥Ïöî */}
                            <div className="col-span-1 text-center text-sm text-gray-500">
                                <div className="flex items-center justify-center gap-1">
                                    <span className="text-blue-500">üëé</span>
                                    <span>{post.dislikes || 0}</span>
                                </div>
                            </div>

                            {/* ÏûëÏÑ±Ïùº */}
                            <div className="col-span-1 text-center text-sm text-gray-500">
                                {new Date(post.createdAt).toLocaleDateString('ko-KR', {
                                    month: 'long',
                                    day: 'numeric'
                                })}
                            </div>
                        </div>
                    );
                })}

                {/* Î™®Î∞îÏùº Î†àÏù¥ÏïÑÏõÉ */}
                {posts.length > 0 && (
                    <div className="md:hidden space-y-2 p-4">
                        {posts.map((post: any, index: number) => {
                            const postId = post.id || post._id;
                            if (!postId) {
                                console.error('Post missing ID in mobile layout:', post);
                                return null;
                            }

                            return (
                                <div
                                    key={postId}
                                    className="p-4 border rounded-lg hover:bg-gray-50 transition-colors cursor-pointer"
                                    onClick={() => handlePostClick(postId)}
                                >
                                    <div className="flex items-center gap-2 mb-2">
                                        <Badge variant="secondary" className="text-xs">
                                            {categories?.find(cat => cat.id === post.category)?.label || post.category}
                                        </Badge>
                                        {post.isHot && (
                                            <Badge variant="destructive" className="text-xs">
                                                HOT
                                            </Badge>
                                        )}
                                    </div>
                                    <h3 className="font-medium text-sm mb-2 line-clamp-2">
                                        {post.title}
                                    </h3>
                                    <div className="flex items-center justify-between text-xs text-gray-500">
                                        <span>{typeof post.author === 'string' ? post.author : post.author?.name || 'Unknown'}</span>
                                        <div className="flex items-center gap-3">
                                            <span>Ï°∞Ìöå {post.views || post.viewCount || 0}</span>
                                            <span>‚ù§Ô∏è {post.likes || 0}</span>
                                            <span>üëé {post.dislikes || 0}</span>
                                        </div>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                )}
            </div>
        );
    };


    return (
        <div className="space-y-6">
            {/* Í∞ÑÎã®Ìïú Ìó§Îçî */}
            <div className="bg-white border-b border-gray-200">
                <div className="max-w-7xl mx-auto px-4 py-6">
                    <div className="flex items-center justify-between">
                        <div>
                            <h1 className="text-3xl font-bold text-gray-900">Ïª§ÎÆ§ÎãàÌã∞</h1>
                            <p className="text-gray-600 mt-1">Îã§ÏñëÌïú Ï£ºÏ†úÏóê ÎåÄÌï¥ Ïù¥ÏïºÍ∏∞ÌïòÍ≥† ÏÜåÌÜµÌï¥Î≥¥ÏÑ∏Ïöî</p>
                        </div>
                        {user && (
                            <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>
                                <DialogTrigger asChild>
                                    <Button
                                        className="bg-indigo hover:bg-indigo-hover hover-scale transition-button shadow-sm"
                                        onClick={handleCreatePost}
                                    >
                                        <Plus className="w-4 h-4 mr-2" />
                                        ÏÉà Í∏Ä ÏûëÏÑ±
                                    </Button>
                                </DialogTrigger>
                                <DialogContent className="max-w-2xl">
                                    <DialogHeader>
                                        <DialogTitle>ÏÉà Í≤åÏãúÍ∏Ä ÏûëÏÑ±</DialogTitle>
                                        <DialogDescription>
                                            Ïª§ÎÆ§ÎãàÌã∞Ïóê ÏÉàÎ°úÏö¥ Í≤åÏãúÍ∏ÄÏùÑ ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî. ÏßàÎ¨∏, ÌõÑÍ∏∞, ÏûêÏú† Ï£ºÏ†úÎ°ú ÏÜåÌÜµÌï† Ïàò ÏûàÏäµÎãàÎã§.
                                        </DialogDescription>
                                    </DialogHeader>
                                    <form onSubmit={handleCreatePostSubmit} className="space-y-4">
                                        <div>
                                            <label className="block text-sm font-medium mb-2">Ï†úÎ™© *</label>
                                            <Input
                                                value={createFormData.title}
                                                onChange={(e) => setCreateFormData(prev => ({ ...prev, title: e.target.value }))}
                                                placeholder="Í≤åÏãúÍ∏Ä Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                                required
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium mb-2">Ïπ¥ÌÖåÍ≥†Î¶¨ *</label>
                                            <Select value={createFormData.category} onValueChange={(value) => setCreateFormData(prev => ({ ...prev, category: value }))}>
                                                <SelectTrigger>
                                                    <SelectValue placeholder="Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî" />
                                                </SelectTrigger>
                                                <SelectContent>
                                                    {categoriesLoading ? (
                                                        <SelectItem value="loading" disabled>Ïπ¥ÌÖåÍ≥†Î¶¨ Î°úÎî© Ï§ë...</SelectItem>
                                                    ) : (
                                                        categories?.map((category) => (
                                                            <SelectItem key={category.id} value={category.id}>
                                                                {category.label}
                                                            </SelectItem>
                                                        ))
                                                    )}
                                                </SelectContent>
                                            </Select>
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium mb-2">ÎÇ¥Ïö© *</label>
                                            <Textarea
                                                value={createFormData.content}
                                                onChange={(e) => setCreateFormData(prev => ({ ...prev, content: e.target.value }))}
                                                placeholder="Í≤åÏãúÍ∏Ä ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                                rows={8}
                                                required
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium mb-2">ÌÉúÍ∑∏</label>
                                            <Input
                                                value={createFormData.tags}
                                                onChange={(e) => setCreateFormData(prev => ({ ...prev, tags: e.target.value }))}
                                                placeholder="ÌÉúÍ∑∏Î•º ÏâºÌëúÎ°ú Íµ¨Î∂ÑÌïòÏó¨ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                            />
                                        </div>

                                        <div className="flex gap-2 pt-4">
                                            <Button type="submit" className="flex-1">
                                                Í≤åÏãúÍ∏Ä ÏûëÏÑ±
                                            </Button>
                                            <Button type="button" variant="outline" className="flex-1" onClick={() => setIsCreateModalOpen(false)}>
                                                Ï∑®ÏÜå
                                            </Button>
                                        </div>
                                    </form>
                                </DialogContent>
                            </Dialog>
                        )}
                    </div>

                    {/* ÌïÑÌÑ∞ Î∞î */}
                    <div className="bg-white border-b border-gray-200">
                        <div className="max-w-7xl mx-auto px-4 py-4">
                            <div className="flex items-center justify-between flex-wrap gap-4">
                                {/* Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÉ≠ */}
                                <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1">
                                    <TabsList className={`grid w-full max-w-lg ${categories ? `grid-cols-${(categories.length + 1)}` : 'grid-cols-4'}`}>
                                        <TabsTrigger value="all">Ï†ÑÏ≤¥</TabsTrigger>
                                        {categoriesLoading ? (
                                            <>
                                                <TabsTrigger value="loading1" disabled>Î°úÎî©Ï§ë...</TabsTrigger>
                                                <TabsTrigger value="loading2" disabled>Î°úÎî©Ï§ë...</TabsTrigger>
                                            </>
                                        ) : (
                                            categories?.map((category) => (
                                                <TabsTrigger key={category.id} value={category.id}>
                                                    {category.label}
                                                </TabsTrigger>
                                            ))
                                        )}
                                    </TabsList>
                                </Tabs>

                                {/* Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ */}
                                <div className="flex items-center gap-4">
                                    <div className="relative">
                                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                                        <Input
                                            placeholder="Í≤åÏãúÍ∏Ä Í≤ÄÏÉâ..."
                                            className="pl-10 w-64"
                                            value={searchQuery}
                                            onChange={(e) => setSearchQuery(e.target.value)}
                                        />
                                    </div>

                                    {/* Ï†ïÎ†¨ ÌïÑÌÑ∞ */}
                                    <Select value={sortBy} onValueChange={(value) => setSortBy(value as any)}>
                                        <SelectTrigger className="w-[120px]">
                                            <SelectValue />
                                        </SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="latest">ÏµúÏã†Ïàú</SelectItem>
                                            <SelectItem value="popular">Ïù∏Í∏∞Ïàú</SelectItem>
                                            <SelectItem value="comments">ÎåìÍ∏ÄÏàú</SelectItem>
                                            <SelectItem value="views">Ï°∞ÌöåÏàú</SelectItem>
                                        </SelectContent>
                                    </Select>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
                    <div className="max-w-7xl mx-auto px-4">
                        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">

                            <TabsContent value="all" className="space-y-6">
                                {renderPosts(
                                    (allPosts as any)?.posts || [],
                                    allLoading,
                                    allError,
                                    'all'
                                )}
                            </TabsContent>

                            {categories?.map((category) => (
                                <TabsContent key={category.id} value={category.id} className="space-y-6">
                                    <CategoryPosts
                                        categoryId={category.id}
                                        searchQuery={searchQuery}
                                        sortBy={sortBy}
                                    />
                                </TabsContent>
                            ))}

                        </Tabs>
                    </div>
                </div>
            </div>

            {/* Ïª§ÎÆ§ÎãàÌã∞ ÌÜµÍ≥Ñ ÏÑπÏÖò */}
            <section className="space-y-6 py-8">
                <div className="text-center space-y-4">
                    <h2 className="text-2xl font-bold">Ïª§ÎÆ§ÎãàÌã∞ ÌÜµÍ≥Ñ</h2>
                    <p className="text-muted-foreground">
                        ÌôúÎ∞úÌïú Ïª§ÎÆ§ÎãàÌã∞ ÌôúÎèô ÌòÑÌô©ÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.
                    </p>
                </div>

                {statsLoading ? (
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                        {[...Array(4)].map((_, i) => (
                            <Card key={i}>
                                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                    <CardTitle className="text-sm font-medium">Î°úÎî© Ï§ë...</CardTitle>
                                    <div className="h-4 w-4 bg-gray-200 rounded animate-pulse" />
                                </CardHeader>
                                <CardContent>
                                    <div className="h-8 bg-gray-200 rounded animate-pulse mb-2" />
                                    <div className="h-4 bg-gray-200 rounded animate-pulse w-20" />
                                </CardContent>
                            </Card>
                        ))}
                    </div>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                        <Card>
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium">Ï¥ù Í≤åÏãúÍ∏Ä</CardTitle>
                                <MessageSquare className="h-4 w-4 text-muted-foreground" />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold">
                                    {((communityStats as any)?.data?.totalPosts || 0).toLocaleString()}
                                </div>
                                <p className="text-xs text-muted-foreground">
                                    {((communityStats as any)?.data?.postsGrowthRate || 0) > 0 ? '+' : ''}
                                    {((communityStats as any)?.data?.postsGrowthRate || 0)}% ÏßÄÎÇú Ï£º ÎåÄÎπÑ
                                </p>
                            </CardContent>
                        </Card>

                        <Card>
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium">ÌôúÏÑ± ÏÇ¨Ïö©Ïûê</CardTitle>
                                <Users className="h-4 w-4 text-muted-foreground" />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold">
                                    {((communityStats as any)?.data?.activeUsers || 0).toLocaleString()}
                                </div>
                                <p className="text-xs text-muted-foreground">
                                    {((communityStats as any)?.data?.usersGrowthRate || 0) > 0 ? '+' : ''}
                                    {((communityStats as any)?.data?.usersGrowthRate || 0)}% ÏßÄÎÇú Ï£º ÎåÄÎπÑ
                                </p>
                            </CardContent>
                        </Card>

                        <Card>
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium">Ï¥ù ÎåìÍ∏Ä</CardTitle>
                                <MessageCircle className="h-4 w-4 text-muted-foreground" />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold">
                                    {((communityStats as any)?.data?.totalComments || 0).toLocaleString()}
                                </div>
                                <p className="text-xs text-muted-foreground">
                                    Ïª§ÎÆ§ÎãàÌã∞ Ï∞∏Ïó¨ÎèÑ
                                </p>
                            </CardContent>
                        </Card>

                        <Card>
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium">ÌèâÍ∑† Ï¢ãÏïÑÏöî</CardTitle>
                                <Heart className="h-4 w-4 text-muted-foreground" />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold">
                                    {((communityStats as any)?.data?.avgLikes || 0).toLocaleString()}
                                </div>
                                <p className="text-xs text-muted-foreground">
                                    Í≤åÏãúÍ∏ÄÎãπ ÌèâÍ∑†
                                </p>
                            </CardContent>
                        </Card>
                    </div>
                )}
            </section>
        </div>
    );
};
